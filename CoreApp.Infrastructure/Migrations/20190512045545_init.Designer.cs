// <auto-generated />
using System;
using CoreApp.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreApp.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190512045545_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreApp.Data.Entities.ActionAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ActionAuth");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Advertistment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Image")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid>("PositionId");

                    b.Property<int>("SortOrder");

                    b.Property<int>("Status");

                    b.Property<string>("Url")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Advertistments");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AdvertistmentPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AdvertistmentPages");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AdvertistmentPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<Guid?>("PageId");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.ToTable("AdvertistmentPositions");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .HasMaxLength(250);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AnnouncementUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AnnouncementId")
                        .HasMaxLength(128);

                    b.Property<bool?>("HasRead");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementUsers");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("075c1072-92a2-4f99-ac11-bf985b13da6e"),
                            name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("e6b40c0d-bb16-49ab-afac-9f4479bc044a"),
                            name = "Staff"
                        },
                        new
                        {
                            Id = new Guid("58261edb-e684-4495-918d-6151314692d8"),
                            name = "Customer"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Avatar");

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("BirthDay");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("075c1072-92a2-4f99-ac11-bf985b23da6e"),
                            Balance = 0m,
                            DateCreated = new DateTime(2019, 5, 12, 11, 55, 44, 723, DateTimeKind.Local).AddTicks(4031),
                            DateModified = new DateTime(2019, 5, 12, 11, 55, 44, 724, DateTimeKind.Local).AddTicks(1341),
                            Email = "admin@gmail.com",
                            FullName = "Administrator",
                            Name = "admin",
                            Password = "admin",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Bill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BillStatus");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<Guid?>("CustomerId");

                    b.Property<string>("CustomerMessage")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("CustomerMobile")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<int>("PaymentMethod");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.BillDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BillId");

                    b.Property<Guid>("ColorId");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<bool?>("HomeFlag");

                    b.Property<bool?>("HotFlag");

                    b.Property<string>("Image")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("SeoAlias")
                        .HasMaxLength(256);

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(256);

                    b.Property<string>("SeoKeyWords")
                        .HasMaxLength(256);

                    b.Property<string>("SeoPageTitle")
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.Property<string>("Tags");

                    b.Property<int?>("ViewCount");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.BlogTag", b =>
                {
                    b.Property<Guid>("BlogId");

                    b.Property<Guid>("TagId");

                    b.Property<Guid>("Id");

                    b.HasKey("BlogId", "TagId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca128c25-e3c1-42b2-9fac-f1332699f193"),
                            Code = "#000000",
                            Name = "Black"
                        },
                        new
                        {
                            Id = new Guid("c3210055-b3a3-4f91-9f45-3b332de15256"),
                            Code = "#FFFFFF",
                            Name = "White"
                        },
                        new
                        {
                            Id = new Guid("bd9887a7-4166-41e2-adc1-6884b921c8b1"),
                            Code = "#ff0000",
                            Name = "Red"
                        },
                        new
                        {
                            Id = new Guid("28df8436-a2fc-4185-a5ae-9bb2dcdf9434"),
                            Code = "#1000ff",
                            Name = "Blue"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(250);

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<double?>("Lat");

                    b.Property<double?>("Lng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Other");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.Property<int>("Status");

                    b.Property<string>("Website")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dde8058d-76cf-4829-809b-266009871068"),
                            Address = "P.Hai-Phong Dien-TT Hue",
                            Email = "englich@gmail.com.com",
                            Lat = 21.043500900000002,
                            Lng = 105.78947580000001,
                            Name = "Panda Shop",
                            Phone = "0942 324 543",
                            Status = 1,
                            Website = "http://pandashop.com"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ControllerAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ControllerAuth");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Email")
                        .HasMaxLength(250);

                    b.Property<string>("Message")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Footer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Footers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3ca1125-98d4-4866-a80c-38d1aabefa97"),
                            Content = "Footer"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Function", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IconCss");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<Guid>("ParentId")
                        .HasMaxLength(128);

                    b.Property<int>("SortOrder");

                    b.Property<int>("Status");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b145d66b-e701-4cfe-91fa-ad7aa5def84b"),
                            IconCss = "fa-desktop",
                            Name = "System",
                            ParentId = new Guid("518d23fe-0672-487e-a660-7d0d178519e0"),
                            SortOrder = 1,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = new Guid("87baa38b-55f8-4e10-81f9-cf570c9f1418"),
                            IconCss = "fa-home",
                            Name = "Role",
                            ParentId = new Guid("2fd41460-7077-49b2-a602-b5e7697ef147"),
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/role/index"
                        },
                        new
                        {
                            Id = new Guid("92365c62-59ea-4c2b-bba7-b76af35ece89"),
                            IconCss = "fa-home",
                            Name = "Function",
                            ParentId = new Guid("3f852d2d-624d-4068-bcf8-68c15ff84e4b"),
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/function/index"
                        },
                        new
                        {
                            Id = new Guid("ce3a3a6e-e2db-4f62-a472-557d43ebf699"),
                            IconCss = "fa-home",
                            Name = "User",
                            ParentId = new Guid("e5e29919-a5e6-4811-8983-805c879a36dd"),
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/user/index"
                        },
                        new
                        {
                            Id = new Guid("23d21d8d-7838-4e4b-99b2-067fa11297a4"),
                            IconCss = "fa-home",
                            Name = "Activity",
                            ParentId = new Guid("b21376b4-4556-4a48-a25b-7f2fed8660c3"),
                            SortOrder = 4,
                            Status = 1,
                            URL = "/admin/activity/index"
                        },
                        new
                        {
                            Id = new Guid("c091c3f6-c2e4-41b8-8246-d7f0f077f843"),
                            IconCss = "fa-home",
                            Name = "Error",
                            ParentId = new Guid("ba65b7b6-c7e0-40a3-8e0b-fa971151e39a"),
                            SortOrder = 5,
                            Status = 1,
                            URL = "/admin/error/index"
                        },
                        new
                        {
                            Id = new Guid("14cac5e9-21c7-44c7-a16e-9704f2945512"),
                            IconCss = "fa-home",
                            Name = "Configuration",
                            ParentId = new Guid("d9dd116b-022d-4012-9077-297be388e311"),
                            SortOrder = 6,
                            Status = 1,
                            URL = "/admin/setting/index"
                        },
                        new
                        {
                            Id = new Guid("2d272548-2982-429d-836b-d72824977e55"),
                            IconCss = "fa-chevron-down",
                            Name = "Product Management",
                            ParentId = new Guid("f562bbbe-8e2b-46a6-82f0-513ae52445b4"),
                            SortOrder = 2,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = new Guid("8502c968-8b68-4794-8278-7e3a6d9bfdbc"),
                            IconCss = "fa-chevron-down",
                            Name = "Category",
                            ParentId = new Guid("76e76b11-e760-4499-a825-0b84990a6b31"),
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/productcategory/index"
                        },
                        new
                        {
                            Id = new Guid("5b816512-de1a-4c8f-b9d8-7706e49e5479"),
                            IconCss = "fa-chevron-down",
                            Name = "Product",
                            ParentId = new Guid("acf82ea7-a213-4a1d-8d2f-f7b244a84ff0"),
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/product/index"
                        },
                        new
                        {
                            Id = new Guid("59672901-f5c6-4d59-a53e-3f610b8f4343"),
                            IconCss = "fa-chevron-down",
                            Name = "Bill",
                            ParentId = new Guid("bdaa83ca-42fb-4820-99e6-2f6c3bbbe967"),
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/bill/index"
                        },
                        new
                        {
                            Id = new Guid("cc20ffa1-83f6-4cc8-8dd5-90d1cbd72f47"),
                            IconCss = "fa-table",
                            Name = "Content",
                            ParentId = new Guid("af082282-f006-4cf1-a710-6814557334ae"),
                            SortOrder = 3,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = new Guid("78609316-2df1-4d04-a924-1acd49a1f77b"),
                            IconCss = "fa-table",
                            Name = "Blog",
                            ParentId = new Guid("4410403c-b4a9-4ad7-aa12-83e8861a39f7"),
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/blog/index"
                        },
                        new
                        {
                            Id = new Guid("f62f3ef1-7839-438d-9ccd-c5498c0f4846"),
                            IconCss = "fa-table",
                            Name = "Page",
                            ParentId = new Guid("6b2971a6-1120-4162-bfb0-f592064de1c9"),
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/page/index"
                        },
                        new
                        {
                            Id = new Guid("71c05c3d-f03d-4d4d-9a34-f419a651b5e4"),
                            IconCss = "fa-clone",
                            Name = "Utilities",
                            ParentId = new Guid("16b05aac-5d33-471e-b5bf-8d926e52aca0"),
                            SortOrder = 4,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = new Guid("0ba1d5a0-da77-4d0a-a119-ccb8fd52ca03"),
                            IconCss = "fa-clone",
                            Name = "Footer",
                            ParentId = new Guid("52185929-47a4-491a-ad7e-3860b047fcc1"),
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/footer/index"
                        },
                        new
                        {
                            Id = new Guid("d03f70fb-85ce-4446-b78a-68814b09d36d"),
                            IconCss = "fa-clone",
                            Name = "Feedback",
                            ParentId = new Guid("16a55dc8-1b16-4abd-b8f4-d19a91eefb90"),
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/feedback/index"
                        },
                        new
                        {
                            Id = new Guid("43860cbd-649c-488b-a6df-4c0ce76fb22c"),
                            IconCss = "fa-clone",
                            Name = "Announcement",
                            ParentId = new Guid("5c39cbe9-d91a-4fe2-8763-6d6a508be593"),
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/announcement/index"
                        },
                        new
                        {
                            Id = new Guid("c88076aa-7756-4263-af2c-ffbc51eb222d"),
                            IconCss = "fa-clone",
                            Name = "Contact",
                            ParentId = new Guid("7d0f5dca-0371-44b5-9920-6832bf6ea303"),
                            SortOrder = 4,
                            Status = 1,
                            URL = "/admin/contact/index"
                        },
                        new
                        {
                            Id = new Guid("78b2b69f-9b41-4145-8272-c4f3028224b1"),
                            IconCss = "fa-clone",
                            Name = "Slide",
                            ParentId = new Guid("0592512d-06c9-402b-a4cc-ec2a0c841ddc"),
                            SortOrder = 5,
                            Status = 1,
                            URL = "/admin/slide/index"
                        },
                        new
                        {
                            Id = new Guid("2ead40de-ca16-44e2-9050-190deebe8791"),
                            IconCss = "fa-clone",
                            Name = "Advertisment",
                            ParentId = new Guid("71dafe3a-be25-4281-9bda-74705a05ecce"),
                            SortOrder = 6,
                            Status = 1,
                            URL = "/admin/advertistment/index"
                        },
                        new
                        {
                            Id = new Guid("d17104a7-1471-454f-aeff-ed8d3bbd55dd"),
                            IconCss = "fa-bar-chart-o",
                            Name = "Report",
                            ParentId = new Guid("a1f67f84-6a7d-4fd8-9809-6b5e7314c7f7"),
                            SortOrder = 5,
                            Status = 1,
                            URL = "/"
                        },
                        new
                        {
                            Id = new Guid("94d1aa79-4c9e-44d5-9966-51b8fe83dfee"),
                            IconCss = "fa-bar-chart-o",
                            Name = "Revenue report",
                            ParentId = new Guid("2337a730-dba6-460e-8702-d2ce078474f0"),
                            SortOrder = 1,
                            Status = 1,
                            URL = "/admin/report/revenues"
                        },
                        new
                        {
                            Id = new Guid("4fdf9897-4471-4495-9716-4dd5825e1939"),
                            IconCss = "fa-bar-chart-o",
                            Name = "Visitor Report",
                            ParentId = new Guid("e46bbaf1-a5a2-4d45-b234-7c9ca9d5e04e"),
                            SortOrder = 2,
                            Status = 1,
                            URL = "/admin/report/visitor"
                        },
                        new
                        {
                            Id = new Guid("1776f0dc-df00-42a2-b378-8873ddd84303"),
                            IconCss = "fa-bar-chart-o",
                            Name = "Reader Report",
                            ParentId = new Guid("f8f01a03-fdca-4d82-b813-92c7d546b6c8"),
                            SortOrder = 3,
                            Status = 1,
                            URL = "/admin/report/reader"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("Resources");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("Content");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool?>("HotFlag");

                    b.Property<string>("Image")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<decimal>("OriginalPrice");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("PromotionPrice");

                    b.Property<string>("SeoAlias")
                        .HasMaxLength(255);

                    b.Property<string>("SeoDescription")
                        .HasMaxLength(255);

                    b.Property<string>("SeoKeyWords")
                        .HasMaxLength(255);

                    b.Property<string>("SeoPageTitle");

                    b.Property<int>("Status");

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<string>("Unit");

                    b.Property<int?>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ac7d971-e4ad-499f-9dd1-0b6003af1c40"),
                            CategoryId = new Guid("075c1072-92a2-4f95-ac11-bf985b23da6e"),
                            DateCreated = new DateTime(2019, 5, 12, 11, 55, 44, 728, DateTimeKind.Local).AddTicks(1157),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 16",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            PromotionPrice = 0m,
                            SeoAlias = "san-pham-16",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("2cff3cc9-55e3-4537-b29a-208e36a5ba33"),
                            CategoryId = new Guid("075c1072-92a2-4f95-ac11-bf985b23da6e"),
                            DateCreated = new DateTime(2019, 5, 12, 11, 55, 44, 728, DateTimeKind.Local).AddTicks(4071),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 17",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            PromotionPrice = 0m,
                            SeoAlias = "san-pham-17",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("96a5f45f-dfe3-4c38-ab0c-d5f7f2a4d5be"),
                            CategoryId = new Guid("075c1072-92a2-4f99-ac11-bf985b23da6e"),
                            DateCreated = new DateTime(2019, 5, 12, 11, 55, 44, 728, DateTimeKind.Local).AddTicks(4101),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "/client-side/images/products/product-1.jpg",
                            Name = "Product 18",
                            OriginalPrice = 1000m,
                            Price = 1000m,
                            PromotionPrice = 0m,
                            SeoAlias = "san-pham-18",
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<string>("Description");

                    b.Property<bool?>("HomeFlag");

                    b.Property<int?>("HomeOrder");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentId");

                    b.Property<string>("SeoAlias");

                    b.Property<string>("SeoDescription");

                    b.Property<string>("SeoKeyWords");

                    b.Property<string>("SeoPageTitle");

                    b.Property<int>("SortOrder");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("075c1072-92a2-4f99-ac11-bf985b23da6e"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Men shirt",
                            SeoAlias = "men-shirt",
                            SortOrder = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("075c1072-92a2-4f95-ac11-bf985b23da6e"),
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateModified = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Women shirt",
                            SeoAlias = "women-shirt",
                            SortOrder = 2,
                            Status = 1
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption")
                        .HasMaxLength(250);

                    b.Property<string>("Path")
                        .HasMaxLength(250);

                    b.Property<Guid>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductQuantity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ColorId");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<Guid>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeId");

                    b.ToTable("ProductQuantities");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductTag", b =>
                {
                    b.Property<Guid>("ProductId");

                    b.Property<Guid>("TagId");

                    b.Property<Guid>("Id");

                    b.HasKey("ProductId", "TagId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ActionId");

                    b.Property<Guid>("ControllerId");

                    b.Property<Guid>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ControllerId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fd3e2cc-fb0d-42d2-8922-446676c93e80"),
                            Name = "XXL"
                        },
                        new
                        {
                            Id = new Guid("6fc7ec10-370e-45d6-a700-0038f38952e4"),
                            Name = "XL"
                        },
                        new
                        {
                            Id = new Guid("fccea93f-d97b-40cb-b8a4-c090dc09ea71"),
                            Name = "L"
                        },
                        new
                        {
                            Id = new Guid("2e7c6d19-468b-45fc-8942-f7bf99436c7d"),
                            Name = "M"
                        },
                        new
                        {
                            Id = new Guid("40ccd247-05c4-4936-8f3c-2f88ade7dc57"),
                            Name = "S"
                        },
                        new
                        {
                            Id = new Guid("41e45803-5f86-4910-8192-06d770446b14"),
                            Name = "XS"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Slide", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<int?>("DisplayOrder");

                    b.Property<string>("GroupAlias")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("Status");

                    b.Property<string>("Url")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Slides");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20a96b1e-da44-42e1-b736-1fcdd38cf35a"),
                            DisplayOrder = 0,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-1.jpg",
                            Name = "Slide 1",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("412ae596-babf-44b5-bf76-c10cd267b4e8"),
                            DisplayOrder = 1,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-2.jpg",
                            Name = "Slide 2",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("3597ed87-007a-432b-96c5-54bc7dae0bea"),
                            DisplayOrder = 2,
                            GroupAlias = "top",
                            Image = "/client-side/images/slider/slide-3.jpg",
                            Name = "Slide 3",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("d38ab7b8-6f96-4505-899b-f66a4a8cab44"),
                            DisplayOrder = 1,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand1.png",
                            Name = "Slide 1",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("848ee67d-4074-481f-ae4a-c50e3099612d"),
                            DisplayOrder = 2,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand2.png",
                            Name = "Slide 2",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("df075864-98b3-4877-bc56-a71255aeecec"),
                            DisplayOrder = 3,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand3.png",
                            Name = "Slide 3",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("d7bdd071-cf39-41e2-9e2c-c7293eab5ecc"),
                            DisplayOrder = 4,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand4.png",
                            Name = "Slide 4",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("7da54abf-974a-4fda-a35e-f6f70e73c935"),
                            DisplayOrder = 5,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand5.png",
                            Name = "Slide 5",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("43a2dcab-1ab5-4566-a6eb-7031182b6bcf"),
                            DisplayOrder = 6,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand6.png",
                            Name = "Slide 6",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("78929c1d-a60a-4dc8-9320-e4ae70945e96"),
                            DisplayOrder = 7,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand7.png",
                            Name = "Slide 7",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("a8573ef5-7fc9-4b7d-9412-8f85f2baaef6"),
                            DisplayOrder = 8,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand8.png",
                            Name = "Slide 8",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("c6bd376d-4920-4eb1-81ee-97c0afdbd65b"),
                            DisplayOrder = 9,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand9.png",
                            Name = "Slide 9",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("8ee512af-a1f6-4e52-8f09-4a4d167c7e89"),
                            DisplayOrder = 10,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand10.png",
                            Name = "Slide 10",
                            Status = true,
                            Url = "#"
                        },
                        new
                        {
                            Id = new Guid("901bf352-3e13-4e9f-ade4-fb3da9cced48"),
                            DisplayOrder = 11,
                            GroupAlias = "brand",
                            Image = "/client-side/images/brand11.png",
                            Name = "Slide 11",
                            Status = true,
                            Url = "#"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.SystemConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("Status");

                    b.Property<string>("Value1");

                    b.Property<int?>("Value2");

                    b.Property<bool?>("Value3");

                    b.Property<DateTime?>("Value4");

                    b.Property<decimal?>("Value5");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a158d15b-1772-44e3-a46e-c2288740d46c"),
                            Name = "Home's title",
                            Status = 1,
                            Value1 = "Shop"
                        },
                        new
                        {
                            Id = new Guid("52ff089b-b1cb-4468-a1b6-98823953c49d"),
                            Name = "Home's title",
                            Status = 1,
                            Value1 = "Shop"
                        },
                        new
                        {
                            Id = new Guid("3538d178-763f-49c7-9452-362992391bce"),
                            Name = "Home's title",
                            Status = 1,
                            Value1 = "Shop"
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.UserInRole", b =>
                {
                    b.Property<Guid>("AppUserId");

                    b.Property<Guid>("AppRoleId");

                    b.Property<Guid>("Id");

                    b.HasKey("AppUserId", "AppRoleId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("AppRoleId");

                    b.ToTable("UserInRoles");

                    b.HasData(
                        new
                        {
                            AppUserId = new Guid("075c1072-92a2-4f99-ac11-bf985b23da6e"),
                            AppRoleId = new Guid("075c1072-92a2-4f99-ac11-bf985b13da6e"),
                            Id = new Guid("c094d5ef-9fe0-43d6-b4c3-3db705a611be")
                        });
                });

            modelBuilder.Entity("CoreApp.Data.Entities.WholePrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FromQuantity");

                    b.Property<decimal>("Price");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("ToQuantity");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("WholePrices");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Advertistment", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.AdvertistmentPosition", "AdvertistmentPosition")
                        .WithMany("Advertistments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AdvertistmentPosition", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.AdvertistmentPage", "AdvertistmentPage")
                        .WithMany("AdvertistmentPositions")
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Announcement", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.AnnouncementUser", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementUsers")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Bill", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("CoreApp.Data.Entities.BillDetail", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.BlogTag", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Blog", "Blog")
                        .WithMany("BlogTags")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Tag", "Tag")
                        .WithMany("BlogTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.Product", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductImage", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductQuantity", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.ProductTag", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.ActionAuth", "ActionAuth")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.ControllerAuth", "ControllerAuth")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ControllerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.AppRole", "AppRole")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.UserInRole", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.AppRole", "AppRole")
                        .WithMany("UserInRoles")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoreApp.Data.Entities.AppUser", "AppUser")
                        .WithMany("UserInRoles")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CoreApp.Data.Entities.WholePrice", b =>
                {
                    b.HasOne("CoreApp.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
